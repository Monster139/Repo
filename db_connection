import psycopg2
#from config import config
from configparser import ConfigParser

def config(filename='database.ini', section='postgresql'):
    # create a parser
    parser = ConfigParser()
    # read config file
    parser.read(filename)

    # get section, default to postgresql
    db = {}
    if parser.has_section(section):
        params = parser.items(section)
        for param in params:
            db[param[0]] = param[1]
    else:
        raise Exception('Section {0} not found in the {1} file'.format(section, filename))
    return db
    
def connect():
    """ Connect to the PostgreSQL database server """
    conn = None
    try:
        # read connection parameters
        params = config()

        # connect to the PostgreSQL server
        print('Connecting to the PostgreSQL database...\n')
        conn = psycopg2.connect(**params)
		
        # create a cursor 
        cur = conn.cursor()
        
	# execute a statement
        #print('PostgreSQL database version:')
        #cur.execute('SELECT version()')
        
        cur.execute('select * from elt.elt_company_config;')
        company_config = cur.fetchall()
        #print(company_config)
        access_key = company_config[0][2]
        secret_key = company_config[0][3]
        print("access_key:",access_key)
        print("secret_key:",secret_key)
        
        cur.execute('select * from elt.elt_table_config;')
        table_config = cur.fetchall()
        #print(table_config)
        fileName = table_config[0][2]
        filePath = table_config[0][3]
        print("\nfileName:",fileName)
        print("filePath:",filePath)
        #new_path=filePath+'/'+fileName
        # close the communication with the PostgreSQL
        #total_columns = cur,execute('select column_name from public.elt_ddl_model where data_type = ''TIMESTAMP'';')
        #print(total_columns)
        cur.close()
    except (Exception, psycopg2.DatabaseError) as error:
        print(error)
    finally:
        if conn is not None:
            conn.close()
            print('\nDatabase connection closed.')


if __name__ == '__main__':
    connect()
#--------database.ini------------------------------------------
#database.ini
[postgresql]
host=hcigdw-cluster-1.chpqvsunpl9q.us-east-2.redshift.amazonaws.com
port=5439
database=hcigdw
user=awsuser
password=M9sterr3dsh1ft!#
